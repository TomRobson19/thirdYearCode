#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language british
\language_package none
\inputencoding auto
\fontencoding default
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize 12
\spacing single
\use_hyperref false
\papersize a4paper
\use_geometry true
\use_package amsmath 1
\use_package amssymb 0
\use_package cancel 0
\use_package esint 1
\use_package mathdots 0
\use_package mathtools 0
\use_package mhchem 0
\use_package stackrel 0
\use_package stmaryrd 0
\use_package undertilde 0
\cite_engine basic
\cite_engine_type default
\biblio_style agsm
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date true
\justification true
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 2cm
\topmargin 2cm
\rightmargin 2cm
\bottommargin 2cm
\headheight 2cm
\headsep 2cm
\footskip 1cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip bigskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Computing Methodologies - Parallel Programming
\end_layout

\begin_layout Author
hzwr87
\end_layout

\begin_layout Section
Vector Addition
\end_layout

\begin_layout Standard
First, we setup the MPI environment, so that each processor knows the total
 number of processes in the system, its own rank and the size of the vectors.
 Once the vectors have been generated, we inform the other processes of
 how many elements have been allocated to each of them.
 From here we scatter both of the vectors to all the processes, giving them
 the appropriate data elements to perform their share of the computations.
 Once these computations have been performed on all processes, including
 the root, we gather them back together and output the result as a vector.
 To ensure that each process is given the same number of elements, each
 vector is padded when it is allocated.
 
\end_layout

\begin_layout Standard
This method of distribution seems to be the only efficient way to perform
 this calculation.
 Another way to do it would be looping through each element of the vectors
 and using MPI send and recieve to transmit the data, but that would be
 less efficient than scatter and gather.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset space \hfill{}
\end_inset


\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Vector Addition Graphs
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Section
Vector Dot Product
\end_layout

\begin_layout Standard
The dot product has been parallelised in a similar manner as the vector
 addition.
 The difference is that we replace the gather from before with a reduce,
 because in this case the final result that we need to bring together from
 all processes is one value rather than an array.
 This reduction computes a total value from all of the calculations on each
 node, without needing to bring these values together on the root and sum
 them up here, which would have been less efficient.
 As before, the vectors are padded.
 
\end_layout

\begin_layout Standard
As with the previous approach, this method of distribution seems to be the
 only efficient way to perform this calculation.
 Another way to do it would be looping through each element of the vectors
 and using MPI send and recieve to transmit the data, but that would be
 less efficient than scatter and reduce.
 Scatter and gather could also be used again as before, and then the sum
 could be calculated on the root process.
 However, this would be less efficient than using a reduce.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset space \hfill{}
\end_inset


\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Vector Dot Product Graphs
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Matrix-Vector Multiplication
\end_layout

\begin_layout Standard
The parallel calculation of matrix-vector multiplication is performed by
 first broadcasting the whole vector to all of the processes, then determining
 the number of rows of the matrix that should be sent to each process.
 As before, the matrix is padded with extra rows to ensure that the call
 to scatter works correctly.
 From here, the matrix-vector multiplication is performed by calculating
 the dot product of the vector and each row.
 The results of these dot products are then gathered together in the output
 array.
 
\end_layout

\begin_layout Standard
This method is more efficient than simply broadcasting the entire matrix
 to all processes, as it leads to less data transfer and superior allocation
 of calculations amongst the processes.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset space \hfill{}
\end_inset


\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Matrix-Vector Multiplication Graphs
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Matrix-Matrix Multiplication
\end_layout

\begin_layout Standard
The procedure of matrix multiplication is performed in a very similar manner
 as the matrix vector calculation.
 In this instance, instead of broadcasting the vector, we broadcast one
 of the matrices, and scatter the other matrix between the processes in
 the same manner as before.
 From here we find the dot product of each row and all of the columns of
 the other matrix, and gather these responses in the pre-allocated output
 matrix as before.
 
\end_layout

\begin_layout Standard
As mentioned above, this scattering of the second matrix rather than simply
 broadcasting both leads to less data transfer and superior allocation of
 calculations amongst the processes.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset space \hfill{}
\end_inset


\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Matrix-Matrix Multiplication Graphs
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_body
\end_document
