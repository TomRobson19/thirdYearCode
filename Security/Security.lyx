#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass article
\begin_preamble
\usepackage {url}
\usepackage [numbers]{natbib}
\date{}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language british
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 2cm
\topmargin 2cm
\rightmargin 2cm
\bottommargin 2cm
\headheight 2cm
\headsep 2cm
\footskip 1cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip bigskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Contemporary Computer Science - Security
\end_layout

\begin_layout Author
Tom Robson - hzwr87
\end_layout

\begin_layout Section
Passwords Stored in Plaintext
\end_layout

\begin_layout Standard
In the diectory /var/www/html/, there is a file called query.php.
 This file is used to connect to the sql server and enable users to log
 in to the web store.
 When the mysql server is set up, the root username and password for the
 system are written in plaintext in the line of code below.
 As the user account given as vulnerability 0 has read access to this file,
 we can open this in a text editor such as nano and view the unencrypted
 root password:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

mysql_connect(localhost,root,letmein) or die(mysql_error());
\end_layout

\end_inset


\end_layout

\begin_layout Standard
In order to remove this vulnerability, these credentials must not be stored
 in plaintext.
\end_layout

\begin_layout Section
index.html is SQL Injectable
\end_layout

\begin_layout Section
Full Database is available to all users
\end_layout

\begin_layout Standard
When signed in as user (the account given as vulnerability 0), we can use
 the mysql command to get access to the full database.
 Using the sequence of commands 'show databases;', 'use shop;', 'show tables',
 'select * from users;' shows us all the information sotred about each user
 with an account for this online shop, including their usernames, passwords
 and balances.
 This would enable anyone with access to this machine to access all of the
 user accounts for the shop and spend their credits.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename /home/tom/Pictures/mysql.png
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
In order to mitigate this vulnerability, these passwords must not be stored
 in this unencrypted form.
 Also, it is recommended that access to this database through mysql is restricte
d to the root user, or administrator by requiring a password to access it.
 
\end_layout

\begin_layout Section
All users have read-write-execute permissions
\end_layout

\begin_layout Section
Command Injection in outputDB
\end_layout

\begin_layout Section
Passwords are crackable
\end_layout

\begin_layout Standard
This uses John the Ripper on the /etc/passwd file, as it contains the salt.
\end_layout

\begin_layout Section
Open Ports e.g.
 Telnet
\end_layout

\begin_layout Section
Vul 8
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
Need 8 vulnerabilities, I find more, can include them, ensure I order by
 severity.
\end_layout

\begin_layout Plain Layout
Each vulnerability is worth 10 marks and is marked as follows: 
\end_layout

\begin_layout Plain Layout
- Naming the vulnerability or providing a single sentence defining it.
 1 mark 
\end_layout

\begin_layout Plain Layout
- Providing a step-by-step guide to exploiting the vulnerability.
 4 marks 
\end_layout

\begin_layout Plain Layout
- Providing a step-by-step guide to mitigating the vulnerability.
 5 marks.
 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Database password var/www/html/query.php - credentials in plain text
\end_layout

\begin_layout Standard
password is letmein
\end_layout

\begin_layout Standard
DB password is also root password for system
\end_layout

\begin_layout Standard
index.html submits to query.php, which is injectable (' or 1=1--) as username
 and password
\end_layout

\begin_layout Standard
As the web server is running as root, can do anything root can do post SQL
 injection, including see the passwd file (Ghomas found this, try it myself)
\end_layout

\begin_layout Standard
Can start mysql, then use show databases;, use shop;, show tables;, from
 users select *; ,passwords in plaintext, balances etc
\end_layout

\begin_layout Standard
open services (nmap): ftp,telnet,http,rpcbind,unknown,unknown,mysql,http-proxy
 (ftp no authentication)
\end_layout

\begin_layout Standard
Can see full bash history for both user and root (not a vulnerability, just
 helpful for us)
\end_layout

\begin_layout Standard
(bridged adapted) java FileServer 
\end_layout

\begin_layout Standard
Buffer overflow in recieveFile.java
\end_layout

\begin_layout Standard
cd / su - python -m SimpleHTTPServer
\end_layout

\begin_layout Standard
command escalation for outputDB - ./outputDB 
\begin_inset Quotes eld
\end_inset

dump.txt && bash
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
cat .mysql_history
\end_layout

\begin_layout Standard
sendfile.java creates a temporary db file while sending, as we have permissions
 could be changed so it stays forever, then have the DB.
 TOCTOU Vulnerability\SpecialChar \slash{}

\end_layout

\begin_layout Standard
ls -ld $HOME --> returns permissions list --> everyone has read-write-execute
\end_layout

\begin_layout Standard
/etc/passwd files have the salt in to break hashes
\end_layout

\begin_layout Standard
other user accounts have weak passwords, or use john, another README in
 toor (password, letmein, 1234567)
\end_layout

\begin_layout Standard
Try using locate README
\end_layout

\begin_layout Standard
Stored XXS in DB - credit
\end_layout

\end_body
\end_document
