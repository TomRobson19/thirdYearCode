#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass article
\begin_preamble
\usepackage {url}
\usepackage [numbers]{natbib}
\date{}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language british
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 2cm
\topmargin 2cm
\rightmargin 2cm
\bottommargin 2cm
\headheight 2cm
\headsep 2cm
\footskip 1cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip bigskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Contemporary Computer Science - Security
\end_layout

\begin_layout Author
Tom Robson - hzwr87
\end_layout

\begin_layout Section
Passwords Stored in Plaintext
\end_layout

\begin_layout Standard
In the directory /var/www/html/, there is a file called query.php.
 This file is used to connect to the sql server and enable users to log
 in to the web store.
 When the mysql server is set up, the root username and password for the
 system are written in plaintext in the line of code below.
 As the user account given as vulnerability 0 has read access to this file,
 we can open this in a text editor such as nano and view the unencrypted
 root password:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

mysql_connect(localhost,root,letmein) or die(mysql_error());
\end_layout

\end_inset


\end_layout

\begin_layout Standard
This vulnerability is also present in the outputDB.c file in the user's home
 directory, with the root password being written in plaintext in the following
 line:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

char cmd[4096] = "mysqldump -pletmein --all-databases > ";
\end_layout

\end_inset


\end_layout

\begin_layout Standard
If we did not have access to the source file for this, we would still be
 able to use the 'strings' command 
\end_layout

\begin_layout Standard
In order to mitigate this vulnerability in both of these files, these credential
s must not be stored in plaintext.
 
\end_layout

\begin_layout Standard
A way of ensuring this would be to store this information in a different
 file, such as a config file, which would be encrypted and have stricter
 permissions applied to it.
\end_layout

\begin_layout Section
index.html is SQL Injectable
\end_layout

\begin_layout Standard
The index.html webpage contains a simple username and password form.
 This form is vulnerable to SQL injection, as we proved by using ' or 1=1--
 as both the username and password.
 This logs us in as the first user in the system.
 From here, we can experiment with more useful commands.
 If we know the username of any of the users of the system 
\end_layout

\begin_layout Standard
Mitigation - sanitise all inputs using a whitelist before passing to SQL.
 Analyse query to see what it will do before it is executed.
 Ensure the queries on the database are performed by a low privileged user
 so significant changes to the database cannot be made.
 Do not embed input into queries, use just as values not commands.
\end_layout

\begin_layout Section
Full Database is available to all users
\end_layout

\begin_layout Standard
When signed in as user (the account given as vulnerability 0), we can use
 the mysql command to get access to the full database.
 Using the sequence of commands 'show databases;', 'use shop;', 'show tables',
 'select * from users;' shows us all the information stored about each user
 with an account for this online shop, including their usernames, passwords
 and balances.
 This would enable anyone with access to this machine to access all of the
 user accounts for the shop and spend their credits.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename /home/tom/Pictures/mysql.png
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
In order to mitigate this vulnerability, these passwords must not be stored
 in this unencrypted form, but instead be encrypted .
 
\end_layout

\begin_layout Standard
Also, it is recommended that access to this database through mysql is restricted
 to the root user, or administrator by requiring a password to access it.
 
\end_layout

\begin_layout Section
Inappropriate permissions
\end_layout

\begin_layout Standard
Can log in as user, add a malicious command to the .bashrc file, as the user
 has full permissions for this file.
 Command could be something like 'rm -rf *', to delete everything on the
 system.
 The next time the root user logs in, this command will be executed and
 all the data on the system will be deleted.
 
\end_layout

\begin_layout Section
Command Injection in outputDB
\end_layout

\begin_layout Standard
The executable outputDB, compiled from outputDB.c, requires a string input
 from the command line to create a dump of the current database.
 This filename is concatenated to the command to dump the database, which
 is stored along with the root password, and executed with user id zero
 to enable it to run privileged commands.
 However, because this can run any string as a command with root permissions,
 this is vulnerable to command injection.
 For example, by inputting the following command, we can make this program
 output the database to the file 
\begin_inset Quotes eld
\end_inset

dump.txt
\begin_inset Quotes erd
\end_inset

, but also give us a bash shell with root permissions:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

./outputDB "dump.txt && bash"
\end_layout

\end_inset


\end_layout

\begin_layout Standard
To mitigate this vulnerability, 
\end_layout

\begin_layout Standard
using execve() instead of system(), as system is unsafe
\end_layout

\begin_layout Standard
execve(cmd,args); Anything the other side of the && will be treated as a
 text argument not run as a command
\end_layout

\begin_layout Section
Passwords are easily crackable
\end_layout

\begin_layout Standard
In the /etc directory, the passwd file contains the hashed passwords for
 the root, toor and backup accounts, among other things.
 They are stored alongside the corresponding salt from their encryption.
 This means that these are vulnerable to dictionary attacks.
 These passwords are very weak, so can be broken very quickly using the
 John the Ripper password cracking tool.
 
\end_layout

\begin_layout Standard
To mitigate this vulnerability, the passwd file should not be readable by
 all users, it should be restricted to root.
 Also, this data should be stored in the shadow file rather than the passwd
 file in the same directory.
 
\end_layout

\begin_layout Standard
These passwords are also encrypted using the MD5 system.
 This is not a good idea, as this system is old and is known to have been
 compromised and exploited a few years ago.
 An alternative hash function should be used for encryption, such as SHA-512.
\end_layout

\begin_layout Section
Open Ports e.g.
 Telnet
\end_layout

\begin_layout Section
XXS in DB
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
Need 8 vulnerabilities, I find more, can include them, ensure I order by
 severity.
\end_layout

\begin_layout Plain Layout
Each vulnerability is worth 10 marks and is marked as follows: 
\end_layout

\begin_layout Plain Layout
- Naming the vulnerability or providing a single sentence defining it.
 1 mark 
\end_layout

\begin_layout Plain Layout
- Providing a step-by-step guide to exploiting the vulnerability.
 4 marks 
\end_layout

\begin_layout Plain Layout
- Providing a step-by-step guide to mitigating the vulnerability.
 5 marks.
 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
index.html submits to query.php, which is injectable (' or 1=1--) as username
 and password
\end_layout

\begin_layout Standard
As the web server is running as root, can do anything root can do post SQL
 injection, including see the passwd file (Ghomas found this, try it myself)
\end_layout

\begin_layout Standard
Can start mysql, then use show databases;, use shop;, show tables;, from
 users select *; ,passwords in plaintext, balances etc
\end_layout

\begin_layout Standard
open services (nmap): ftp,telnet,http,rpcbind,unknown,unknown,mysql,http-proxy
 (ftp no authentication)
\end_layout

\begin_layout Standard
sendfile.java creates a temporary db file while sending, as we have permissions
 could be changed so it stays forever, then have the DB.
 (TOCTOU Vulnerability)
\end_layout

\begin_layout Standard
ls -ld $HOME --> returns permissions list --> everyone has read-write-execute
\end_layout

\begin_layout Standard
/etc/passwd files have the salt in to break hashes, and are readable, and
 are very weak so quick using john
\end_layout

\begin_layout Standard
Solve ^ by making only root able to read
\end_layout

\begin_layout Standard
other user accounts have weak passwords, or use john, another README in
 toor (password, letmein, 1234567)
\end_layout

\begin_layout Standard
Try using locate README
\end_layout

\begin_layout Standard
Stored XXS in DB - credit
\end_layout

\begin_layout Standard
.bashrc is accessible by all, add malicious command to be executed when root
 logs in (make new root user, delete everything)
\end_layout

\begin_layout Standard
(when logged in as backup) recieveFile.java has no data limit, can just DOS
 it
\end_layout

\begin_layout Standard
XSS - change field type to be varchar, then put script in
\end_layout

\begin_layout Standard
alter table users modify column credit varchar(500);
\end_layout

\begin_layout Standard
update users set credit = ''<script>alert('Hacked!')</script>''
\end_layout

\end_body
\end_document
